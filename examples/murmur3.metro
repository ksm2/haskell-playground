const MURMUR_C1 = 0xcc9e2d51U
const MURMUR_C2 = 0x1b873593U

fn murmur3(seed UInt, key [Byte]) UInt {
  remainder := key.length & 3U
  bytes := key.length - remainder

  k1 := 0U
  hash := seed
  i := 0U

  while i < bytes {
    k1  = key[i]
        | key[i + 1U] << 8U
        | key[i + 2U] << 16U
        | key[i + 3U] << 24U
    i += 4U

    k1 *= MURMUR_C1
    k1 <%= 15U
    k1 *= MURMUR_C2

    hash ^= k1
    hash <%= 13U
    hash = hash * 5U + 0xe6546b64U
  }

  k1 = 0

  if remainder == 3U {
    k1 ^= key[i + 2U] << 16U
  }
  if remainder >= 2U {
    k1 ^= key[i + 1U] << 8U
  }
  if remainder >= 1U {
    k1 ^= key[i]

    k1 *= MURMUR_C1
    k1 <%= 15U
    k1 *= MURMUR_C2
    hash ^= k1
  }

  hash ^= key.length

  hash ^= (hash >> 16U)
  hash *= 0x85ebca6bU
  hash ^= (hash >> 13U)
  hash *= 0xc2b2ae35U
  hash ^= (hash >> 16U)

  return hash
}

fn main() {
  str := "hello world"
  assert murmur3(0U, str.toByteList()) == 1586663183U => "murmur3(0U, \"hello world\".toByteList()) == 1586663183U"
  assert murmur3(1U, str.toByteList()) == 1128525090U => "murmur3(1U, \"hello world\".toByteList()) == 1128525090U"
  assert murmur3(4294967295U, str.toByteList()) == 1281490592U => "murmur3(4294967295U, \"hello world\".toByteList()) == 1281490592U"

  str = "demo"
  assert murmur3(0U, str.toByteList()) == 2714225050U => "murmur3(0U, \"demo\".toByteList()) == 2714225050U"
  assert murmur3(1U, str.toByteList()) == 1493421137U => "murmur3(1U, \"demo\".toByteList()) == 1493421137U"
  assert murmur3(4294967295U, str.toByteList()) == 2570562148U => "murmur3(4294967295U, \"demo\".toByteList()) == 2570562148U"
}
