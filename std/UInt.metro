class UInt {
  countLeadingOnes() Byte {
    return (~this).countLeadingZeros()
  }

  countTrailingOnes() Byte {
    return (~this).countTrailingZeros()
  }

  countZeros() Byte {
    return (~this).countOnes()
  }
}

impl ToString for UInt {
  toString() String {
    len := this.countDigits()
    unsafe {
      str := __allocate(len + 4)
      len.store(str)
      this.putIntStr(str + len + 3)
      return str
    }
  }

  countDigits() Int {
    out := 1
    if this >= 10U {
      out = (this / 10U).countDigits() + 1
    }
    return out
  }

  unsafe putIntStr(ptr Int) {
    if this < 10U {
      Byte.store((this + 48U) as Byte, ptr)
    } else {
      Byte.store((this % 10U + 48U) as Byte, ptr)
      (this / 10U).putIntStr(ptr - 1)
    }
  }
}
